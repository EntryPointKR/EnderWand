buildscript {
    repositories {
        mavenLocal()
    }
    dependencies {
        classpath 'kr.entree:spigradle:1.1'
    }
}

plugins {
    id 'com.github.johnrengelman.shadow' version '5.2.0'
    id 'maven-publish'
}

apply plugin: 'kr.entree.spigradle'

spigot {
    name = 'EnderWand'
    authors = ['EntryPoint']
    apiVersion = '1.15'
    softDepends = ['Vault', 'ProtocolLib', 'LuckPerms']
}

repositories {
    jitpack()
    protocolLib()
    mavenLocal() // For protocollib
}

dependencies {
    api project(':enderwand-core-kotlin')
    compileOnly spigot('1.15.2')
    compileOnly(vault()) {
        exclude module: 'spigot-api'
    }
    compileOnly protocolLib()
    compileOnly 'net.luckperms:api:5.0'
    'com.google.auto.service:auto-service:1.0-rc6'.with {
        compileOnly it
        kapt it
    }
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.3'
    testImplementation spigot()
}

shadowJar {
    archiveClassifier.set('shaded')
    minimize {
        exclude dependency('org.jetbrains.kotlin:.*')
        exclude dependency('org.jetbrains.kotlinx:.*')
    }
}

import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

task nostdlibJar(type: ShadowJar) {
    dependsOn shadowJar
    group = 'shadow'
    archiveClassifier.set('nostdlib')
    doFirst {
        spigot.softDepends.add('Spikot')
        spigotPluginYaml.actions*.execute(spigotPluginYaml)
    }
    from(project.convention.getPlugin(JavaPluginConvention).sourceSets.main.output)
    configurations = [project.configurations.runtimeClasspath]
    dependencies {
        exclude dependency('org.jetbrains.kotlin:.*')
        exclude dependency('org.jetbrains.kotlinx:.*')
    }
}

build.dependsOn shadowJar, nostdlibJar

publishing {
    publications {
        bukkitKotlin(MavenPublication) {
            from components.java
            artifact shadowJar
            afterEvaluate {
                artifact kotlinSourcesJar
            }
        }
    }
}

artifacts {
    archives kotlinSourcesJar
}

[compileKotlin, compileTestKotlin]*.kotlinOptions*.jvmTarget = 1.8
compileKotlin.kotlinOptions.freeCompilerArgs += [
        '-Xuse-experimental=kotlin.Experimental',
        '-Xinline-classes'
]